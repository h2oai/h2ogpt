nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""

global:
  externalLLM:
    enabled: false
    # -- list of secrets for h2ogpt and agents env
    secret: {}
#      OPENAI_AZURE_KEY: "value"
#      OPENAI_AZURE_API_BASE: "value"
#      OPENAI_API_KEY: "value"
#      REPLICATE_API_TOKEN: "value"

    modelLock:

  visionModels:
    # -- Enable vision models
    enabled: false
    # -- Visible vision models, the vision model itslef needs to be set via modeLock or base_model. Ex: visibleModels: ['OpenGVLab/InternVL-Chat-V1-5']
    visibleModels: [ ]
    rotateAlignResizeImage: false

h2ogpt:
  # -- Enable h2oGPT
  enabled: true
  # -- Enable agents
  agents:
    # -- Run agents with h2oGPT container
    enabled: true
    agent_workers: 5
  openai:
    enabled: true
    openai_workers: 5
  replicaCount: 1
  imagePullSecrets:
  image:
    repository: gcr.io/vorvan/h2oai/h2ogpt-runtime
    tag:
    pullPolicy: IfNotPresent
  initImage:
    repository:
    tag:
    pullPolicy:
  # -- Extra volumes, for more certs, mount under /etc/ssl/more-certs
  extraVolumes: []
  # -- Extra volume mounts
  extraVolumeMounts: []
  # -- Set hostname and zone to true for pod affinity rules based on hostname and zone.
  podAffinity:
  # hostname:
  # zone:
  storage:
    size: 128Gi
    class:
    useEphemeral: true

  # -- Defaults configs are set internally with recommended values. Set values if you really need to change.
  # -- Supported configs are commented. If you don't pass any value, keep {}
  overrideConfig: {}
#    verbose:
#    heap_app_id:
#    num_async:
#    save_dir:
#    score_model:
#    share:
#    enforce_h2ogpt_api_key:
#    enforce_h2ogpt_ui_key:
#    h2ogpt_api_keys:
#    use_auth_token:
#    visible_models:
#    top_k_docs_max_show:
#    admin_pass:
#    function_server:
#    function_server_workers:
#    multiple_workers_gunicorn:
#    llava_model:
#    enable_llava:
#    enable_tts:
#    enable_stt:
#    enable_transcriptions:
#    asr_model:
#    pre_load_embedding_model:
#    pre_load_image_audio_models:
#    cut_distance:
#    hf_embedding_model:
#    enable_captions:
#    enable_doctr:
#    embedding_gpu_id:

  # -- You can pass additional config here if overrideConfig does not have it.
  additionalConfig: {}

  service:
    type: NodePort
    webPort: 80
    openaiPort: 5000
    functionPort: 5002
    agentsPort: 5004
    webServiceAnnotations: {}

  updateStrategy:
    type: RollingUpdate

  podSecurityContext:
    runAsNonRoot: true
    runAsUser:
    runAsGroup:
    fsGroup:

  securityContext:
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault

  resources:
    requests:
      memory: 32Gi
      nvidia.com/gpu: 0
    limits:
      memory: 64Gi
      nvidia.com/gpu: 0
  # -- Node taints to tolerate by the h2ogpt pods.
  tolerations: []
  # -- Node selector for the h2ogpt pods.
  nodeSelector: {}

  env: {}

  podAnnotations: {}
  podLabels: {}

agents:
  # -- Enable agents, this must be `false` if `h2ogpt.agents.enabled` is `true`
  enabled: false
  agent_workers: 5
  autoscaling:
    # Enable autoscaling (HPA) for agents
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetMemory: 32Gi
    targetCPU: 80
  replicaCount: 1
  imagePullSecrets:
  image:
    repository: gcr.io/vorvan/h2oai/h2ogpt-runtime
    tag:
    pullPolicy: IfNotPresent
  initImage:
    repository:
    tag:
    pullPolicy:
  # -- Extra volumes, for more certs, mount under /etc/ssl/more-certs
  extraVolumes: []
  # -- Extra volume mounts
  extraVolumeMounts: []
  # -- Set hostname and zone to true for pod affinity rules based on hostname and zone.
  podAffinity:
  # hostname:
  # zone:

  storage:
    size: 128Gi
    class:
    useEphemeral: true

  # -- Defaults configs are set internally with recommended values. Set values if you really need to change.
  # -- Supported configs are commented. If you don't pass any value, keep {}
  overrideConfig: {}
#    verbose:
#    heap_app_id:
#    num_async:
#    save_dir:
#    score_model:
#    share:
#    enforce_h2ogpt_api_key:
#    enforce_h2ogpt_ui_key:
#    h2ogpt_api_keys:
#    use_auth_token:
#    visible_models:
#    top_k_docs_max_show:
#    admin_pass:
#    multiple_workers_gunicorn:
#    llava_model:
#    enable_llava:
#    enable_tts:
#    enable_stt:
#    enable_transcriptions:
#    asr_model:
#    pre_load_embedding_model:
#    pre_load_image_audio_models:
#    cut_distance:
#    hf_embedding_model:
#    enable_captions:
#    enable_doctr:
#    embedding_gpu_id:

  # -- You can pass additional config here if overrideConfig does not have it.
  additionalConfig: {}

  service:
    type: NodePort
    agentsPort: 5004
    annotations: {}

  updateStrategy:
    type: RollingUpdate

  podSecurityContext:
    runAsNonRoot: true
    runAsUser:
    runAsGroup:
    fsGroup:

  securityContext:
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault

  resources:
    requests:
      memory: 32Gi
      nvidia.com/gpu: 1
    limits:
      memory: 64Gi
      nvidia.com/gpu: 1
  # -- Node taints to tolerate by the agents pods.
  tolerations: []
  # -- Node selector for the agents pods.
  nodeSelector: {}

  env: {}

  podAnnotations: {}
  podLabels: {}

vllm:
  # -- Enable vllm
  enabled: false
  replicaCount: 1

  image:
    repository: vllm/vllm-openai
    tag: latest
    pullPolicy: IfNotPresent
  # -- Set hostname and zone to true for pod affinity rules based on hostname and zone.
  podAffinity:

    # hostname:
    # zone:

  imagePullSecrets:

  storage:
    size: 512Gi
    class: 
    useEphemeral: true
  
  overrideConfig:

  containerArgs:
    - "--model"
    - h2oai/h2ogpt-4096-llama2-7b-chat
    - "--tokenizer"
    - hf-internal-testing/llama-tokenizer
    - "--tensor-parallel-size"
    - 2
    - "--seed"
    - 1234
    - "--trust-remote-code"

  service:
    type: ClusterIP
    port: 5000

  updateStrategy:
    type: RollingUpdate

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 
    runAsGroup: 
    fsGroup: 

  securityContext:
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:

  env:
    VLLM_NO_USAGE_STATS: "1"
    DO_NOT_TRACK: "1"

  resources:

  nodeSelector:

  tolerations:

  podAnnotations: {}
  podLabels: {}


# -- CA certs
caCertificates: ""
